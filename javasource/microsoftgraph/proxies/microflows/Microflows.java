// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package microsoftgraph.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	/**
	 * @deprecated
	 * The default constructor of the Microflows class should not be used.
	 * Use the static microflow invocation methods instead.
	 */
	@java.lang.Deprecated(since = "9.12", forRemoval = true)
	public Microflows() {}

	// These are the microflows for the MicrosoftGraph module
	public static void aCR_Subscription(IContext context, microsoftgraph.proxies.Subscription _subscription)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Subscription", _subscription == null ? null : _subscription.getMendixObject());
		Core.microflowCall("MicrosoftGraph.ACR_Subscription").withParams(params).execute(context);
	}
	public static void aCT_Authentication_Delete(IContext context, microsoftgraph.proxies.Authentication _authentication)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authentication", _authentication == null ? null : _authentication.getMendixObject());
		Core.microflowCall("MicrosoftGraph.ACT_Authentication_Delete").withParams(params).execute(context);
	}
	public static void aCT_Authentication_ToggleActive(IContext context, microsoftgraph.proxies.Authentication _authentication)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authentication", _authentication == null ? null : _authentication.getMendixObject());
		Core.microflowCall("MicrosoftGraph.ACT_Authentication_ToggleActive").withParams(params).execute(context);
	}
	public static void aCT_Authorization_Reauthorize(IContext context, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		Core.microflowCall("MicrosoftGraph.ACT_Authorization_Reauthorize").withParams(params).execute(context);
	}
	public static void aCT_Group_Delete(IContext context, microsoftgraph.proxies.Group _group)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Group", _group == null ? null : _group.getMendixObject());
		Core.microflowCall("MicrosoftGraph.ACT_Group_Delete").withParams(params).execute(context);
	}
	public static void aCT_Group_View(IContext context, microsoftgraph.proxies.Authorization _authorization, microsoftgraph.proxies.Group _group)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		params.put("Group", _group == null ? null : _group.getMendixObject());
		Core.microflowCall("MicrosoftGraph.ACT_Group_View").withParams(params).execute(context);
	}
	public static microsoftgraph.proxies.ProfilePhoto aCT_Photo_Parameter(IContext context, microsoftgraph.proxies.ProfilePhoto _mappingParameter)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("MappingParameter", _mappingParameter == null ? null : _mappingParameter.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("MicrosoftGraph.ACT_Photo_Parameter").withParams(params).execute(context);
		return result == null ? null : microsoftgraph.proxies.ProfilePhoto.initialize(context, result);
	}
	public static void aCT_StringArrayWrapper_Create(IContext context, microsoftgraph.proxies.StringArray _stringArray)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("StringArray", _stringArray == null ? null : _stringArray.getMendixObject());
		Core.microflowCall("MicrosoftGraph.ACT_StringArrayWrapper_Create").withParams(params).execute(context);
	}
	public static void aCT_Subscription_Create(IContext context, microsoftgraph.proxies.Subscription _subscription)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Subscription", _subscription == null ? null : _subscription.getMendixObject());
		Core.microflowCall("MicrosoftGraph.ACT_Subscription_Create").withParams(params).execute(context);
	}
	public static void aCT_Subscription_Delete(IContext context, microsoftgraph.proxies.Subscription _subscription, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Subscription", _subscription == null ? null : _subscription.getMendixObject());
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		Core.microflowCall("MicrosoftGraph.ACT_Subscription_Delete").withParams(params).execute(context);
	}
	public static void aCT_Subscription_Update(IContext context, microsoftgraph.proxies.Subscription _subscription)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Subscription", _subscription == null ? null : _subscription.getMendixObject());
		Core.microflowCall("MicrosoftGraph.ACT_Subscription_Update").withParams(params).execute(context);
	}
	public static void aCT_SubscriptionGetAll(IContext context, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		Core.microflowCall("MicrosoftGraph.ACT_SubscriptionGetAll").withParams(params).execute(context);
	}
	public static void aCT_User_Create(IContext context, microsoftgraph.proxies.User _user)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("User", _user == null ? null : _user.getMendixObject());
		Core.microflowCall("MicrosoftGraph.ACT_User_Create").withParams(params).execute(context);
	}
	public static void aCT_User_Update(IContext context, microsoftgraph.proxies.User _user)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("User", _user == null ? null : _user.getMendixObject());
		Core.microflowCall("MicrosoftGraph.ACT_User_Update").withParams(params).execute(context);
	}
	public static boolean bCO_Authentication(IContext context, microsoftgraph.proxies.Authentication _authentication)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authentication", _authentication == null ? null : _authentication.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("MicrosoftGraph.BCO_Authentication").withParams(params).execute(context);
	}
	public static boolean bCO_Authorization(IContext context, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("MicrosoftGraph.BCO_Authorization").withParams(params).execute(context);
	}
	public static java.lang.Long cAL_Authentication_AuthorizedUsers(IContext context, microsoftgraph.proxies.Authentication _authentication)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authentication", _authentication == null ? null : _authentication.getMendixObject());
		return (java.lang.Long) Core.microflowCall("MicrosoftGraph.CAL_Authentication_AuthorizedUsers").withParams(params).execute(context);
	}
	public static java.lang.String convert_ChangeType_Export(IContext context, microsoftgraph.proxies.ENUM_ChangeType _changeType)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ChangeType", _changeType == null ? null : _changeType.name());
		return (java.lang.String) Core.microflowCall("MicrosoftGraph.Convert_ChangeType_Export").withParams(params).execute(context);
	}
	public static microsoftgraph.proxies.ENUM_ChangeType convert_ChangeType_Import(IContext context, java.lang.String _changeType)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("changeType", _changeType);
		java.lang.String result = (java.lang.String) Core.microflowCall("MicrosoftGraph.Convert_ChangeType_Import").withParams(params).execute(context);
		return result == null ? null : microsoftgraph.proxies.ENUM_ChangeType.valueOf(result);
	}
	public static system.proxies.HttpResponse dELETE(IContext context, java.lang.String _location, java.lang.String _contentType, microsoftgraph.proxies.Authorization _authorization, java.lang.String _request)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Location", _location);
		params.put("ContentType", _contentType);
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		params.put("Request", _request);
		IMendixObject result = (IMendixObject)Core.microflowCall("MicrosoftGraph.DELETE").withParams(params).execute(context);
		return result == null ? null : system.proxies.HttpResponse.initialize(context, result);
	}
	public static microsoftgraph.proxies.Authorization dS_Authorization_Active(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("MicrosoftGraph.DS_Authorization_Active").withParams(params).execute(context);
		return result == null ? null : microsoftgraph.proxies.Authorization.initialize(context, result);
	}
	public static java.util.List<microsoftgraph.proxies.Group> dS_Group_GetAllGroups(IContext context, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("MicrosoftGraph.DS_Group_GetAllGroups").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> microsoftgraph.proxies.Group.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static microsoftgraph.proxies.ModuleSetup dS_ModuleSetup_Check(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("MicrosoftGraph.DS_ModuleSetup_Check").withParams(params).execute(context);
		return result == null ? null : microsoftgraph.proxies.ModuleSetup.initialize(context, result);
	}
	public static java.util.List<microsoftgraph.proxies.User> dS_User_AllUsers(IContext context, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("MicrosoftGraph.DS_User_AllUsers").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> microsoftgraph.proxies.User.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static java.util.List<microsoftgraph.proxies.User> dS_User_DirectReports(IContext context, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("MicrosoftGraph.DS_User_DirectReports").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> microsoftgraph.proxies.User.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static java.util.List<microsoftgraph.proxies.User> dS_User_ListGroupMembers(IContext context, microsoftgraph.proxies.Group _group)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Group", _group == null ? null : _group.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("MicrosoftGraph.DS_User_ListGroupMembers").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> microsoftgraph.proxies.User.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static java.util.List<microsoftgraph.proxies.User> dS_User_ListGroupOwners(IContext context, microsoftgraph.proxies.Group _group)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Group", _group == null ? null : _group.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("MicrosoftGraph.DS_User_ListGroupOwners").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> microsoftgraph.proxies.User.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static microsoftgraph.proxies.ProfilePhoto dS_User_MyPhoto(IContext context, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("MicrosoftGraph.DS_User_MyPhoto").withParams(params).execute(context);
		return result == null ? null : microsoftgraph.proxies.ProfilePhoto.initialize(context, result);
	}
	public static microsoftgraph.proxies.User dS_User_MyProfile(IContext context, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("MicrosoftGraph.DS_User_MyProfile").withParams(params).execute(context);
		return result == null ? null : microsoftgraph.proxies.User.initialize(context, result);
	}
	public static system.proxies.HttpResponse gET(IContext context, java.lang.String _location, java.lang.String _contentType, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Location", _location);
		params.put("ContentType", _contentType);
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("MicrosoftGraph.GET").withParams(params).execute(context);
		return result == null ? null : system.proxies.HttpResponse.initialize(context, result);
	}
	public static void oCH_Authentication_GetWellKnownConfiguration(IContext context, microsoftgraph.proxies.Authentication _authentication)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authentication", _authentication == null ? null : _authentication.getMendixObject());
		Core.microflowCall("MicrosoftGraph.OCH_Authentication_GetWellKnownConfiguration").withParams(params).execute(context);
	}
	public static system.proxies.HttpResponse pATCH(IContext context, java.lang.String _location, java.lang.String _contentType, microsoftgraph.proxies.Authorization _authorization, java.lang.String _request)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Location", _location);
		params.put("ContentType", _contentType);
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		params.put("Request", _request);
		IMendixObject result = (IMendixObject)Core.microflowCall("MicrosoftGraph.PATCH").withParams(params).execute(context);
		return result == null ? null : system.proxies.HttpResponse.initialize(context, result);
	}
	public static system.proxies.HttpResponse pOST(IContext context, java.lang.String _request, java.lang.String _location, java.lang.String _contentType, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Request", _request);
		params.put("Location", _location);
		params.put("ContentType", _contentType);
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("MicrosoftGraph.POST").withParams(params).execute(context);
		return result == null ? null : system.proxies.HttpResponse.initialize(context, result);
	}
	public static java.lang.String postNotification(IContext context, system.proxies.HttpRequest _httpRequest, system.proxies.HttpResponse _httpResponse, java.lang.String _validationToken)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("httpRequest", _httpRequest == null ? null : _httpRequest.getMendixObject());
		params.put("httpResponse", _httpResponse == null ? null : _httpResponse.getMendixObject());
		params.put("validationToken", _validationToken);
		return (java.lang.String) Core.microflowCall("MicrosoftGraph.PostNotification").withParams(params).execute(context);
	}
	/**
	 * Apps subscribing to change notifications might get their subscriptions removed and miss some change notifications. Apps should implement logic to detect and recover from the loss, and resume a continuous change notification flow.
	 * Certain events can cause a subscription to be removed. These events include:
	 * User's password has been reset
	 * User's device is out of compliance
	 * User's account has been revoked
	 * When such an event happens, Microsoft Graph sends a special lifecycle notification, subscriptionRemoved.
	 * Microsoft Graph also sends another lifecycle notification, missed, if a change notification cannot be delivered to an app.
	 * An app subscribing to change notifications should listen to the subscriptionRemoved and missed signals and do the following:
	 * Upon receiving a subscriptionRemoved lifecycle notification, the app should recreate the subscription in order to maintain a continuous flow.
	 * On receiving a missed lifecycle notification, the app should resynchronize resource data using Microsoft Graph.
	 * To receive lifecycle notifications, you can use the existing notificationUrl endpoint that already receives change notifications, or you can register a separate lifecycleNotificationUrl to receive subscriptionRemoved and missed lifecycle notifications in a separate endpoint.
	 * Lifecycle notifications are supported for subscriptions created on these resource types:
	 * Outlook message
	 * Outlook event
	 * Outlook personal contact
	 * Teams chatMessage
	 * For other resource types, you may still provide a lifecycleNotificationUrl when creating the subscription and your application will receive lifecycle notifications whenever the resource implements it.
	 */
	public static java.lang.String postSubscription_LifeCycleNotifications(IContext context, system.proxies.HttpRequest _httpRequest, system.proxies.HttpResponse _httpResponse, java.lang.String _validationToken)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("httpRequest", _httpRequest == null ? null : _httpRequest.getMendixObject());
		params.put("httpResponse", _httpResponse == null ? null : _httpResponse.getMendixObject());
		params.put("validationToken", _validationToken);
		return (java.lang.String) Core.microflowCall("MicrosoftGraph.PostSubscription_LifeCycleNotifications").withParams(params).execute(context);
	}
	public static java.lang.String pRS_GetCallback(IContext context, system.proxies.HttpRequest _httpRequest, system.proxies.HttpResponse _httpResponse, java.lang.String _code, java.lang.String _state, java.lang.String _admin_consent, java.lang.String _tenant, java.lang.String _error, java.lang.String _error_uri, java.lang.String _error_description, java.lang.String _error_subcode)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("httpRequest", _httpRequest == null ? null : _httpRequest.getMendixObject());
		params.put("httpResponse", _httpResponse == null ? null : _httpResponse.getMendixObject());
		params.put("code", _code);
		params.put("state", _state);
		params.put("admin_consent", _admin_consent);
		params.put("tenant", _tenant);
		params.put("error", _error);
		params.put("error_uri", _error_uri);
		params.put("error_description", _error_description);
		params.put("error_subcode", _error_subcode);
		return (java.lang.String) Core.microflowCall("MicrosoftGraph.PRS_GetCallback").withParams(params).execute(context);
	}
	public static java.lang.String pRS_PostCallback(IContext context, system.proxies.HttpRequest _httpRequest, system.proxies.HttpResponse _httpResponse)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("httpRequest", _httpRequest == null ? null : _httpRequest.getMendixObject());
		params.put("httpResponse", _httpResponse == null ? null : _httpResponse.getMendixObject());
		return (java.lang.String) Core.microflowCall("MicrosoftGraph.PRS_PostCallback").withParams(params).execute(context);
	}
	public static system.proxies.HttpResponse pUT(IContext context, java.lang.String _location, java.lang.String _contentType, microsoftgraph.proxies.Authorization _authorization, java.lang.String _request, java.lang.String _contentLength, java.lang.String _contentRange)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Location", _location);
		params.put("ContentType", _contentType);
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		params.put("Request", _request);
		params.put("ContentLength", _contentLength);
		params.put("ContentRange", _contentRange);
		IMendixObject result = (IMendixObject)Core.microflowCall("MicrosoftGraph.PUT").withParams(params).execute(context);
		return result == null ? null : system.proxies.HttpResponse.initialize(context, result);
	}
	public static system.proxies.HttpResponse pUT_Binary(IContext context, java.lang.String _location, java.lang.String _contentType, microsoftgraph.proxies.Authorization _authorization, java.lang.String _request, java.lang.String _contentLength, java.lang.String _contentRange, system.proxies.FileDocument _request_Binary)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Location", _location);
		params.put("ContentType", _contentType);
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		params.put("Request", _request);
		params.put("ContentLength", _contentLength);
		params.put("ContentRange", _contentRange);
		params.put("Request_Binary", _request_Binary == null ? null : _request_Binary.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("MicrosoftGraph.PUT_Binary").withParams(params).execute(context);
		return result == null ? null : system.proxies.HttpResponse.initialize(context, result);
	}
	public static void sCE_Subscription_RenewAll(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("MicrosoftGraph.SCE_Subscription_RenewAll").withParams(params).execute(context);
	}
	public static java.lang.String sUB_Authentication_GetAdminAccessURL(IContext context, microsoftgraph.proxies.Authentication _authentication)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authentication", _authentication == null ? null : _authentication.getMendixObject());
		return (java.lang.String) Core.microflowCall("MicrosoftGraph.SUB_Authentication_GetAdminAccessURL").withParams(params).execute(context);
	}
	public static java.lang.String sUB_Authentication_GetUserAccessURL(IContext context, microsoftgraph.proxies.Authentication _authentication)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authentication", _authentication == null ? null : _authentication.getMendixObject());
		return (java.lang.String) Core.microflowCall("MicrosoftGraph.SUB_Authentication_GetUserAccessURL").withParams(params).execute(context);
	}
	public static microsoftgraph.proxies.Authentication sUB_Authentication_MappingParameter(IContext context, microsoftgraph.proxies.Authentication _mappingParameter)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("MappingParameter", _mappingParameter == null ? null : _mappingParameter.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("MicrosoftGraph.SUB_Authentication_MappingParameter").withParams(params).execute(context);
		return result == null ? null : microsoftgraph.proxies.Authentication.initialize(context, result);
	}
	public static void sUB_Authentication_SetDefaultConfiguration(IContext context, microsoftgraph.proxies.Authentication _authentication)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authentication", _authentication == null ? null : _authentication.getMendixObject());
		Core.microflowCall("MicrosoftGraph.SUB_Authentication_SetDefaultConfiguration").withParams(params).execute(context);
	}
	public static boolean sUB_Authorization_GetAccessToken_AuthorizationCode(IContext context, java.lang.String _code, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Code", _code);
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("MicrosoftGraph.SUB_Authorization_GetAccessToken_AuthorizationCode").withParams(params).execute(context);
	}
	public static boolean sUB_Authorization_GetAccessToken_ClientCredentials(IContext context, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("MicrosoftGraph.SUB_Authorization_GetAccessToken_ClientCredentials").withParams(params).execute(context);
	}
	public static microsoftgraph.proxies.Authorization sUB_Authorization_GetActive(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("MicrosoftGraph.SUB_Authorization_GetActive").withParams(params).execute(context);
		return result == null ? null : microsoftgraph.proxies.Authorization.initialize(context, result);
	}
	public static microsoftgraph.proxies.Authorization sUB_Authorization_GetActiveByAuthentication(IContext context, microsoftgraph.proxies.Authentication _authentication)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authentication", _authentication == null ? null : _authentication.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("MicrosoftGraph.SUB_Authorization_GetActiveByAuthentication").withParams(params).execute(context);
		return result == null ? null : microsoftgraph.proxies.Authorization.initialize(context, result);
	}
	public static void sUB_Authorization_GetFromForm(IContext context, system.proxies.HttpRequest _httpRequest, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("httpRequest", _httpRequest == null ? null : _httpRequest.getMendixObject());
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		Core.microflowCall("MicrosoftGraph.SUB_Authorization_GetFromForm").withParams(params).execute(context);
	}
	public static microsoftgraph.proxies.Authorization sUB_Authorization_GetOrCreate(IContext context, microsoftgraph.proxies.Authentication _authentication)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authentication", _authentication == null ? null : _authentication.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("MicrosoftGraph.SUB_Authorization_GetOrCreate").withParams(params).execute(context);
		return result == null ? null : microsoftgraph.proxies.Authorization.initialize(context, result);
	}
	public static void sUB_Authorization_ProcessSuccessfulResponse(IContext context, system.proxies.HttpResponse _response, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Response", _response == null ? null : _response.getMendixObject());
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		Core.microflowCall("MicrosoftGraph.SUB_Authorization_ProcessSuccessfulResponse").withParams(params).execute(context);
	}
	public static boolean sUB_Authorization_Reauthorize(IContext context, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("MicrosoftGraph.SUB_Authorization_Reauthorize").withParams(params).execute(context);
	}
	public static boolean sUB_Authorization_RefreshAccessToken(IContext context, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("MicrosoftGraph.SUB_Authorization_RefreshAccessToken").withParams(params).execute(context);
	}
	public static java.lang.String sUB_Authorization_SetNonce(IContext context, java.lang.String _scope)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Scope", _scope);
		return (java.lang.String) Core.microflowCall("MicrosoftGraph.SUB_Authorization_SetNonce").withParams(params).execute(context);
	}
	public static java.util.List<microsoftgraph.proxies.BatchResponse> sUB_BatchRequest_Send(IContext context, microsoftgraph.proxies.Authorization _authorization, microsoftgraph.proxies.Batch _batchRequest)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		params.put("BatchRequest", _batchRequest == null ? null : _batchRequest.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("MicrosoftGraph.SUB_BatchRequest_Send").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> microsoftgraph.proxies.BatchResponse.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static java.lang.String sUB_ChangeNotification_Process(IContext context, system.proxies.HttpRequest _httpRequest)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("httpRequest", _httpRequest == null ? null : _httpRequest.getMendixObject());
		return (java.lang.String) Core.microflowCall("MicrosoftGraph.SUB_ChangeNotification_Process").withParams(params).execute(context);
	}
	public static void sUB_ChangeNotification_ProcessLifeCycleEvent(IContext context, system.proxies.HttpRequest _httpRequest)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("httpRequest", _httpRequest == null ? null : _httpRequest.getMendixObject());
		Core.microflowCall("MicrosoftGraph.SUB_ChangeNotification_ProcessLifeCycleEvent").withParams(params).execute(context);
	}
	public static void sUB_ChangeNotification_Validate(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("MicrosoftGraph.SUB_ChangeNotification_Validate").withParams(params).execute(context);
	}
	/**
	 * Add a member to a security or Microsoft 365 group through the members navigation property.
	 */
	public static boolean sUB_Group_AddMember(IContext context, java.lang.String _groupId, microsoftgraph.proxies.Authorization _authorization, java.lang.String _directoryObjectId)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("GroupId", _groupId);
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		params.put("DirectoryObjectId", _directoryObjectId);
		return (java.lang.Boolean) Core.microflowCall("MicrosoftGraph.SUB_Group_AddMember").withParams(params).execute(context);
	}
	/**
	 * When deleted, Microsoft 365 groups are moved to a temporary container and can be restored within 30 days. After that time, they're permanently deleted. This isn't applicable to Security groups and Distribution groups which are permanently deleted immediately. To learn more, see deletedItems.
	 */
	public static boolean sUB_Group_Delete(IContext context, java.lang.String _groupId, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("GroupId", _groupId);
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("MicrosoftGraph.SUB_Group_Delete").withParams(params).execute(context);
	}
	/**
	 * List all the groups in an organization, including but not limited to Microsoft 365 groups.
	 * This operation returns by default only a subset of the more commonly used properties for each group. These default properties are noted in the Properties section. To get properties that are not returned by default, do a GET operation for the group and specify the properties in a $select OData query option. The hasMembersWithLicenseErrors property is an exception and is not returned in the $select query.
	 */
	public static java.util.List<microsoftgraph.proxies.Group> sUB_Group_GetAll(IContext context, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("MicrosoftGraph.SUB_Group_GetAll").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> microsoftgraph.proxies.Group.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	/**
	 * Get the properties and relationships of a group object.
	 * This operation returns by default only a subset of all the available properties, as noted in the Properties section. To get properties that are not returned by default, specify them in a $select OData query option. The hasMembersWithLicenseErrors and isArchived properties are an exception and are not returned in the $select query.
	 */
	public static microsoftgraph.proxies.Group sUB_Group_GetById(IContext context, java.lang.String _groupId, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("GroupId", _groupId);
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("MicrosoftGraph.SUB_Group_GetById").withParams(params).execute(context);
		return result == null ? null : microsoftgraph.proxies.Group.initialize(context, result);
	}
	/**
	 * Remove a member from a group via the members navigation property. You can't remove a member from groups with dynamic memberships.
	 */
	public static boolean sUB_Group_RemoveMember(IContext context, java.lang.String _groupId, microsoftgraph.proxies.Authorization _authorization, java.lang.String _directoryObjectId)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("GroupId", _groupId);
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		params.put("DirectoryObjectId", _directoryObjectId);
		return (java.lang.Boolean) Core.microflowCall("MicrosoftGraph.SUB_Group_RemoveMember").withParams(params).execute(context);
	}
	public static java.lang.String sUB_HttpMessage_ParseFormData(IContext context, java.lang.String _key, system.proxies.HttpRequest _httpRequest)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Key", _key);
		params.put("HttpRequest", _httpRequest == null ? null : _httpRequest.getMendixObject());
		return (java.lang.String) Core.microflowCall("MicrosoftGraph.SUB_HttpMessage_ParseFormData").withParams(params).execute(context);
	}
	public static void sUB_httpResponse_ValidateToken(IContext context, system.proxies.HttpResponse _httpResponse, java.lang.String _validationToken)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("httpResponse", _httpResponse == null ? null : _httpResponse.getMendixObject());
		params.put("validationToken", _validationToken);
		Core.microflowCall("MicrosoftGraph.SUB_httpResponse_ValidateToken").withParams(params).execute(context);
	}
	public static microsoftgraph.proxies.ModuleSetup sUB_ModuleSetup_GetOrCreate(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("MicrosoftGraph.SUB_ModuleSetup_GetOrCreate").withParams(params).execute(context);
		return result == null ? null : microsoftgraph.proxies.ModuleSetup.initialize(context, result);
	}
	public static java.lang.String sUB_Response_ErrorMessage(IContext context, system.proxies.HttpResponse _httpResponse, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("HttpResponse", _httpResponse == null ? null : _httpResponse.getMendixObject());
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		return (java.lang.String) Core.microflowCall("MicrosoftGraph.SUB_Response_ErrorMessage").withParams(params).execute(context);
	}
	public static java.lang.String sUB_Scopes_Get(IContext context, microsoftgraph.proxies.Authentication _authentication)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authentication", _authentication == null ? null : _authentication.getMendixObject());
		return (java.lang.String) Core.microflowCall("MicrosoftGraph.SUB_Scopes_Get").withParams(params).execute(context);
	}
	/**
	 * Subscribes a listener application to receive change notifications when the requested type of changes occur to the specified resource in Microsoft Graph.
	 */
	public static boolean sUB_Subscription_Create(IContext context, microsoftgraph.proxies.Subscription _subscription, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Subscription", _subscription == null ? null : _subscription.getMendixObject());
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("MicrosoftGraph.SUB_Subscription_Create").withParams(params).execute(context);
	}
	/**
	 * Delete a subscription.
	 */
	public static boolean sUB_Subscription_Delete(IContext context, microsoftgraph.proxies.Subscription _subscription, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Subscription", _subscription == null ? null : _subscription.getMendixObject());
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("MicrosoftGraph.SUB_Subscription_Delete").withParams(params).execute(context);
	}
	/**
	 * Retrieve the properties and relationships of webhook subscriptions, based on the app ID, the user, and the user's role with a tenant.
	 * The content of the response depends on the context in which the app is calling; for details, see the scenarios in https://docs.microsoft.com/en-us/graph/api/subscription-list?view=graph-rest-1.0&tabs=http#permissions.
	 */
	public static java.util.List<microsoftgraph.proxies.Subscription> sUB_Subscription_GetAll(IContext context, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("MicrosoftGraph.SUB_Subscription_GetAll").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> microsoftgraph.proxies.Subscription.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	/**
	 * Reauthorize the subscription without extending its expiration date
	 */
	public static boolean sUB_Subscription_Reauthorize(IContext context, microsoftgraph.proxies.Authorization _authorization, microsoftgraph.proxies.Subscription _subscription)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		params.put("Subscription", _subscription == null ? null : _subscription.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("MicrosoftGraph.SUB_Subscription_Reauthorize").withParams(params).execute(context);
	}
	/**
	 * Renew a subscription by extending its expiry time.
	 * The table in the Permissions section lists the resources that support subscribing to change notifications.
	 * Subscriptions expire after a length of time that varies by resource type. In order to avoid missing change notifications, an app should renew its subscriptions well in advance of their expiry date.
	 */
	public static boolean sUB_Subscription_Renew(IContext context, microsoftgraph.proxies.Authorization _authorization, microsoftgraph.proxies.Subscription _subscription)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		params.put("Subscription", _subscription == null ? null : _subscription.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("MicrosoftGraph.SUB_Subscription_Renew").withParams(params).execute(context);
	}
	/**
	 * Create a new user. The request body contains the user to create. At a minimum, you must specify the required properties for the user. You can optionally specify any other writable properties.
	 * This operation returns by default only a subset of the properties for each user. These default properties are noted in the Properties section. To get properties that are not returned by default, do a GET operation and specify the properties in a $select OData query option.
	 */
	public static boolean sUB_User_Create(IContext context, microsoftgraph.proxies.Authorization _authorization, microsoftgraph.proxies.User _user)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		params.put("User", _user == null ? null : _user.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("MicrosoftGraph.SUB_User_Create").withParams(params).execute(context);
	}
	/**
	 * Retrieve a list of user objects.
	 * This operation returns by default only a subset of the more commonly used properties for each user. These default properties are noted in the Properties section. To get properties that are not returned by default, do a GET operation for the user and specify the properties in a $select OData query option.
	 */
	public static java.util.List<microsoftgraph.proxies.User> sUB_User_GetAllUsers(IContext context, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("MicrosoftGraph.SUB_User_GetAllUsers").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> microsoftgraph.proxies.User.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	/**
	 * Retrieve the properties and relationships of user object.
	 */
	public static microsoftgraph.proxies.User sUB_User_GetById(IContext context, microsoftgraph.proxies.Authorization _authorization, java.lang.String _userId)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		params.put("UserId", _userId);
		IMendixObject result = (IMendixObject)Core.microflowCall("MicrosoftGraph.SUB_User_GetById").withParams(params).execute(context);
		return result == null ? null : microsoftgraph.proxies.User.initialize(context, result);
	}
	/**
	 * Get newly created, updated, or deleted users without having to perform a full read of the entire user collection. See change tracking for details.
	 */
	public static java.util.List<microsoftgraph.proxies.User> sUB_User_GetDelta(IContext context, microsoftgraph.proxies.Authorization _authorization, microsoftgraph.proxies.DeltaQuery _deltaQuery)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		params.put("DeltaQuery", _deltaQuery == null ? null : _deltaQuery.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("MicrosoftGraph.SUB_User_GetDelta").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> microsoftgraph.proxies.User.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	/**
	 * Get a user's direct reports. Returns the users and contacts for whom this user is assigned as manager.
	 */
	public static java.util.List<microsoftgraph.proxies.User> sUB_User_GetMyDirectReports(IContext context, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("MicrosoftGraph.SUB_User_GetMyDirectReports").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> microsoftgraph.proxies.User.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	/**
	 * Get the specified profilePhoto or its metadata (profilePhoto properties).
	 * The supported sizes of HD photos on Microsoft 365 are as follows: 48x48, 64x64, 96x96, 120x120, 240x240, 360x360, 432x432, 504x504, and 648x648. Photos can be any dimension if they are stored in Azure Active Directory.
	 * You can get the metadata of the largest available photo, or specify a size to get the metadata for that photo size. If the size you request is not available, you can still get a smaller size that the user has uploaded and made available. For example, if the user uploads a photo that is 504x504 pixels, all but the 648x648 size of photo will be available for download.
	 */
	public static microsoftgraph.proxies.ProfilePhoto sUB_User_GetMyPhoto(IContext context, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("MicrosoftGraph.SUB_User_GetMyPhoto").withParams(params).execute(context);
		return result == null ? null : microsoftgraph.proxies.ProfilePhoto.initialize(context, result);
	}
	/**
	 * For the signed-in user
	 */
	public static microsoftgraph.proxies.User sUB_User_GetMyProfile(IContext context, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("MicrosoftGraph.SUB_User_GetMyProfile").withParams(params).execute(context);
		return result == null ? null : microsoftgraph.proxies.User.initialize(context, result);
	}
	/**
	 * Get the specified profilePhoto or its metadata (profilePhoto properties).
	 * The supported sizes of HD photos on Microsoft 365 are as follows: 48x48, 64x64, 96x96, 120x120, 240x240, 360x360, 432x432, 504x504, and 648x648. Photos can be any dimension if they are stored in Azure Active Directory.
	 * You can get the metadata of the largest available photo, or specify a size to get the metadata for that photo size. If the size you request is not available, you can still get a smaller size that the user has uploaded and made available. For example, if the user uploads a photo that is 504x504 pixels, all but the 648x648 size of photo will be available for download.
	 */
	public static microsoftgraph.proxies.ProfilePhoto sUB_User_GetProfilePhoto(IContext context, microsoftgraph.proxies.Authorization _authorization, java.lang.String _userIdOrUserPrincipalName)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		params.put("UserIdOrUserPrincipalName", _userIdOrUserPrincipalName);
		IMendixObject result = (IMendixObject)Core.microflowCall("MicrosoftGraph.SUB_User_GetProfilePhoto").withParams(params).execute(context);
		return result == null ? null : microsoftgraph.proxies.ProfilePhoto.initialize(context, result);
	}
	/**
	 * Get a list of the group's direct members. A group can have users, organizational contacts, devices, service principals and other groups as members.
	 */
	public static java.util.List<microsoftgraph.proxies.User> sUB_User_ListGroupMembers(IContext context, microsoftgraph.proxies.Authorization _authorization, java.lang.String _groupId)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		params.put("GroupId", _groupId);
		java.util.List<IMendixObject> objs = Core.microflowCall("MicrosoftGraph.SUB_User_ListGroupMembers").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> microsoftgraph.proxies.User.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	/**
	 * Retrieve a list of the group's owners. The owners are a set of users or service principals who are allowed to modify the group object. Owners are currently not available in Microsoft Graph for groups that were created in Exchange or groups that are synchronized from an on-premises environment.
	 */
	public static java.util.List<microsoftgraph.proxies.User> sUB_User_ListGroupOwners(IContext context, microsoftgraph.proxies.Authorization _authorization, java.lang.String _groupId)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		params.put("GroupId", _groupId);
		java.util.List<IMendixObject> objs = Core.microflowCall("MicrosoftGraph.SUB_User_ListGroupOwners").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> microsoftgraph.proxies.User.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static void sUB_User_ProcessResponse(IContext context, microsoftgraph.proxies.Response _request, java.util.List<microsoftgraph.proxies.User> _userList)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Request", _request == null ? null : _request.getMendixObject());
		java.util.List<IMendixObject> listparam_userList = null;
		if (_userList != null)
		{
			listparam_userList = new java.util.ArrayList<>();
			for (var obj : _userList) {
				listparam_userList.add(obj.getMendixObject());
			}
		}
		params.put("UserList", listparam_userList);

		Core.microflowCall("MicrosoftGraph.SUB_User_ProcessResponse").withParams(params).execute(context);
	}
	/**
	 * Update the properties of a user object. Not all properties can be updated by Member or Guest users with their default permissions without Administrator roles. Compare member and guest default permissions to see properties they can manage.
	 */
	public static boolean sUB_User_Update(IContext context, microsoftgraph.proxies.Authorization _authorization, microsoftgraph.proxies.User _user)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		params.put("User", _user == null ? null : _user.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("MicrosoftGraph.SUB_User_Update").withParams(params).execute(context);
	}
	/**
	 * As part of the OpenID Connect (OIDC) standard, the UserInfo endpoint returns information about an authenticated user. In the Microsoft identity platform, the UserInfo endpoint is hosted by Microsoft Graph at https://graph.microsoft.com/oidc/userinfo.
	 */
	public static microsoftgraph.proxies.UserInfo sUB_UserInfo_Get(IContext context, microsoftgraph.proxies.Authorization _authorization)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authorization", _authorization == null ? null : _authorization.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("MicrosoftGraph.SUB_UserInfo_Get").withParams(params).execute(context);
		return result == null ? null : microsoftgraph.proxies.UserInfo.initialize(context, result);
	}
	public static boolean sUB_ValidationTokens_Process(IContext context, microsoftgraph.proxies.ValidationTokens _validationTokens)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ValidationTokens", _validationTokens == null ? null : _validationTokens.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("MicrosoftGraph.SUB_ValidationTokens_Process").withParams(params).execute(context);
	}
	public static boolean val_Authentication(IContext context, microsoftgraph.proxies.Authentication _authentication)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Authentication", _authentication == null ? null : _authentication.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("MicrosoftGraph.Val_Authentication").withParams(params).execute(context);
	}
}
